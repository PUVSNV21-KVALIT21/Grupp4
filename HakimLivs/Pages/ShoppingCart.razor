@using HakimLivs.Services
@using HakimLivs.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject ProductService ProductService
@inject CartState CartState
@implements IDisposable


<div class="d-flex gap-3 border-1">

    @if (CartState.selectedProducts.Count != 0)
    {

        <Button Color="Color.Primary" Clicked="@ShowModal">Varukorg <span>@CartState.totalPrice kr</span></Button>
    }


    <Modal @bind-Visible="@modalVisible">
        <ModalContent>
            <ModalHeader>
                <ModalTitle>Varukorg</ModalTitle>
                <CloseButton />
            </ModalHeader>

            <ModalBody>
                <div>
                    @if (CartState.selectedProducts.Count == 0 || CartState.selectedProducts == null)
                    {
                        <span>Här var det tomt!</span>
                    }
                    else
                    {

                        @foreach (var p in CartState.selectedProducts)
                        {
                            if(p.Product != null)
                            {
                                <div class="d-flex justify-content-between m-2">

                                <span>
                                    @p.Product.Name

                                </span>
                                <span>
                                    <button class="btn btn-primary" @onclick="(() => SubtractProductQuantity(p))">-</button>

                                    @p.ProductQuantity

                                    <button class="btn btn-primary" @onclick="(() => AddProductQuantity(p))">+</button>
                                </span>
                            </div>
                            }

                        }
                        <p style="text-align:right; font-weight:bold;">@CartState.totalPrice kr</p>
                    }

                </div>

            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Stäng</Button>
                <Button Color="Color.Primary" Clicked="@HideModal" To="/checkout" Type="ButtonType.Link"><NavLink style="color:white">Till kassan</NavLink></Button>

            </ModalFooter>
        </ModalContent>
    </Modal>


</div>




@code {
    [Parameter]
    public List<Product> ProductList { get; set; }


    private bool modalVisible;

    private async Task AddProductQuantity(BasketProduct basketProduct)
    {
        ProductList = await ProductService.GetProducts();
        if(ProductList != null || ProductList.Count() != 0)
        {
            await CartState.AddProductQuantity(basketProduct);
            await ProtectedLocalStorage.SetAsync("productsInCart", CartState.selectedProducts);
            await ProtectedLocalStorage.SetAsync("totalPrice", CartState.totalPrice);
        }

    }

    private async Task SubtractProductQuantity(BasketProduct basketProduct)
    {
        ProductList = await ProductService.GetProducts();
        if (ProductList != null || ProductList.Count() != 0)
        {
            await CartState.SubtractProductQuantity(basketProduct);
            await ProtectedLocalStorage.SetAsync("productsInCart", CartState.selectedProducts);
            await ProtectedLocalStorage.SetAsync("totalPrice", CartState.totalPrice);
        }
    }

    private Task ShowModal()
    {
        modalVisible = true;

        return Task.CompletedTask;
    }

    private Task HideModal()
    {
        modalVisible = false;

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        CartState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartState.OnChange -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && CartState.IsLoggingOut == false)
        {
            var productsInStorage = await ProtectedLocalStorage.GetAsync<List<BasketProduct>>("productsInCart");
            var products = productsInStorage.Success ? productsInStorage.Value.ToList() : null;
            var totalPriceInStorage = await ProtectedLocalStorage.GetAsync<decimal>("totalPrice");
            var totalprice = totalPriceInStorage.Success ? totalPriceInStorage.Value : 0;

            var bpList = new List<BasketProduct>();
            if (products != null && totalprice != 0)
            {
                foreach (var item in products)
                {
                    var product = await ProductService.GetProduct(item.Product.Id);
                    bpList.Add(new BasketProduct { Product = product, ProductQuantity = item.ProductQuantity });
                }
                CartState.selectedProducts = bpList;
                CartState.totalPrice = totalprice;
                CartState.NotifyStateChanged();
            }
        }
    }
}


