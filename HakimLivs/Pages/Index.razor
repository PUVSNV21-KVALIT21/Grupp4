@page "/"
@using HakimLivs.Models
@using HakimLivs.Services
@inject ProductService ProductService
@inject CategoryService CategoryService


<PageTitle>Hakim Livs</PageTitle>
<div class="d-flex justify-content-center mb-4">
    <div>
        <div class="d-flex gap-2 m-2">
            <EditForm Model="@searchTerm" OnSubmit="@SearchProducts">
                <InputText @bind-Value="searchTerm" placeholder="Sök..."></InputText>
            </EditForm>
            <button class="btn btn-outline-secondary" type="button" @onclick="@SearchProducts">🔎</button>
        </div>
        <div class="d-flex gap-1 m-2">
            <Dropdown>
                <DropdownToggle Color="Color.Primary">
                    Sortera
                </DropdownToggle>
                <DropdownMenu>
                    <DropdownItem @onclick='(() => SortProduct("highestPrice"))'>
                        Högsta pris
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem @onclick='(() => SortProduct("lowestPrice"))'>
                        Lägsta pris
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem @onclick='(() => SortProduct("stock"))'>
                        Lagersaldo
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>

            <Dropdown>
                <DropdownToggle Color="Color.Primary">
                    Filtrera
                </DropdownToggle>
                <DropdownMenu>
                    <DropdownDivider />
                    <DropdownItem @onclick='(() => FilterProduct("eco"))'>
                        Eko
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem @onclick='(() => FilterProduct("glutenFree"))'>
                        Glutenfritt
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem @onclick='(() => FilterProduct("vegan"))'>
                        Veganskt
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

    </div>
</div>

<div class="d-flex">
</div>


<Layout>
    <Layout Sider>
        <LayoutSiderContent>
            <Categories CategoryList="@CategoryList" DisplayCategoryEvent="DisplayCategory"></Categories>
        </LayoutSiderContent>
        <Layout>
            <LayoutContent>
                <Products searchTerm="@searchTerm" ProductList="@ProductList"></Products>
            </LayoutContent>
        </Layout>
    </Layout>
</Layout>



@code {
    public List<Product> ProductList;
    public List<Category> CategoryList;

    public string searchTerm = "";

    async Task SearchProducts()
    {
        ProductList = await ProductService.SearchProduct(searchTerm);
    }

    void SortProduct(string sortBy)
    {
        switch (sortBy)
        {
            case "highestPrice":
                ProductList = ProductList.OrderByDescending(p => p.Price).ToList();
                break;
            case "lowestPrice":
                ProductList = ProductList.OrderBy(p => p.Price).ToList();
                break;
            case "stock":
                ProductList = ProductList.OrderByDescending(p => p.Stock).ToList();
                break;
        }
    }
    void FilterProduct(string filterBy)
    {
        switch (filterBy)
        {
            case "glutenFree":
                ProductList = ProductList.Where(p => p.IsGlutenfree == true).ToList();
                break;
            case "eco":
                ProductList = ProductList.Where(p => p.IsEco == true).ToList();
                break;
            case "vegan":
                ProductList = ProductList.Where(p => p.IsVegan == true).ToList();
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ProductList = await ProductService.GetProducts();
        CategoryList = await CategoryService.GetCategories();
    }


    async Task DisplayCategory(int id)
    {
        ProductList = await ProductService.GetProductByCategory(id);
    }

}