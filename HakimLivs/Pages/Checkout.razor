@page "/checkout"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject CartState CartState
@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<h3>Kassa</h3>


<h4>Varor:</h4>

<div>
    @foreach (var p in CartState.selectedProducts)
    {
        if (p.Product != null)
        {
            <div class="d-flex justify-content-between m-2">

                <span>
                    @p.Product.Name

                </span>
                <span>
                    <button class="btn btn-primary" @onclick="(() => SubtractProductQuantity(p))">-</button>

                    @p.ProductQuantity

                    <button class="btn btn-primary" @onclick="(() => AddProductQuantity(p))">+</button>
                </span>
            </div>
        }

    }
</div>

@if (CartState.selectedProducts.Count() != 0)
{
    <label for="discountCode">Rabattkod</label>
    <input class="form-control-sm" name="discountCode" type="text" @bind-value="@discountCode" />
    <button type="button" class="btn btn-secondary" @onclick="(() => CheckDiscount(discountCode))">Aktivera</button>
    <p>@discountStatus</p>
    <div>
        <p>Pris totalt: @CartState.totalPrice kr</p>
        @if (isDiscountCodeValid)
        {
            <p>Rabatterat pris @discountPrice kr, (om du ändrar antalet produkter så klicka på "aktivera" igen för att se ditt nya pris.)</p>
        }
    </div>
}

<RadioGroup TValue="string" Name="colors" @bind-CheckedValue="@checkedValue">
    <Radio Value="@("Faktura")">Faktura</Radio>
    <Radio Value="@("VISA/Mastercard")">VISA/Mastercard</Radio>
</RadioGroup>


<AuthorizeView>
    <Authorized>
        @if (CartState.selectedProducts.Count() == 0)
        {
            <p>Varukorgen är tom</p>
        }
        else
        {
            <Button Color="Color.Primary" Clicked="@ShowModal">Beställ</Button>
        }
    </Authorized>
    <NotAuthorized>
        <Button Color="Color.Primary" Clicked="@ShowModal" Disabled>Beställ</Button>
        <p>Du måste vara inloggad för att kunna beställa</p>
    </NotAuthorized>
</AuthorizeView>

<Modal @bind-Visible="@modalVisible">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Kvitto</ModalTitle>
            <CloseButton />
        </ModalHeader>

        <ModalBody>
            <h4>
                Tack för din beställning

            </h4>

            @if (checkedValue == "Faktura")
            {
                <p>Vi skickar en faktura på @orderPrice kr till dig</p>
            }

            @if (checkedValue == "VISA/Mastercard")
            {
                <p>Vi har debiterat @orderPrice kr från ditt kort </p>
            }


        </ModalBody>

        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Stäng</Button>
            
        </ModalFooter>
    </ModalContent>
</Modal>




@code {
    private string checkedValue = "Faktura";
    private string discountCode;
    private bool isDiscountCodeValid;
    private string discountStatus = "";
    private decimal? discountPrice;
    private List<Order> orders;
    private decimal? orderPrice;

    private bool orderButtonDisabled = false;

    private bool modalVisible;

    private async Task ShowModal()
    {
        await SaveOrder();
        modalVisible = true;

        await Task.CompletedTask;
    }
    async Task SaveOrder()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        orderPrice = isDiscountCodeValid ? discountPrice : CartState.totalPrice;
        await OrderService.SaveOrder(CartState.selectedProducts, orderPrice, checkedValue, discountCode, user);
    }

    async Task CheckDiscount(string discountCode)
    {
        isDiscountCodeValid = await OrderService.CheckDiscount(discountCode);
        orders = await OrderService.GetOrdersForUser();
        if (!orders.Select(x => x.Basket.Discount.Code).Contains(discountCode))
        {
            isDiscountCodeValid = true;
            ApplyDiscount();
        }
        else
        {
            isDiscountCodeValid = false;
        }
        discountStatus = isDiscountCodeValid ? "Rabattkod aktiverad" : "Rabattkod ogiltig";

    }

    async Task ApplyDiscount()
    {
        discountPrice = await OrderService.ApplyDiscount(discountCode, CartState.totalPrice);
        orderPrice = discountPrice;
    }

    private Task HideModal()
    {
        modalVisible = false;
        ClearCart();
        return Task.CompletedTask;
    }

    private async Task ClearCart()
    {
        await CartState.ClearCartOnBuy();
        await ProtectedLocalStorage.DeleteAsync("productsInCart");
        await ProtectedLocalStorage.DeleteAsync("totalPrice");

    }

    private async Task AddProductQuantity(BasketProduct basketProduct)
    {
        CartState.AddProductQuantity(basketProduct);
        await ProtectedLocalStorage.SetAsync("productsInCart", CartState.selectedProducts);
        await ProtectedLocalStorage.SetAsync("totalPrice", CartState.totalPrice);
    }

    private async Task SubtractProductQuantity(BasketProduct basketProduct)
    {
        CartState.SubtractProductQuantity(basketProduct);
        await ProtectedLocalStorage.SetAsync("productsInCart", CartState.selectedProducts);
        await ProtectedLocalStorage.SetAsync("totalPrice", CartState.totalPrice);
    }


    protected override void OnInitialized()
    {
        CartState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartState.OnChange -= StateHasChanged;
    }

}
